Wed Apr 28 11:36:54 AM +05 2021

Надо обдумать поведение вот этого куска кода

(define (readable P T)
  (let ((t (if (timeout? T) T 0)))
    (let poll ()
      (catch 'system-error
         (lambda () (car (select P '() '() t)))
         (lambda er (if (= EINTR (system-error-errno er))
                        (readable ports)
                        (apply throw er)))))))

readable может вернуть процедуру, которой сам и будет пользоваться для
зацикливания select-а, в случае прерываний. И тогда, нам не придётся таскать P и
T в другом коде. И это хорошо, потому что они особо не меняются.

Но тогда port-readable? Хотелось бы сделать в той же логике, Можно будет
написать:

  (define (port-readable? p t) (compose not null? (readable t p)))

Вроде, это нормально. Воплотим.

Wed Apr 28 12:10:52 PM +05 2021

Следующая мысля, которая приходит опосля. Можно превратить select в поток
событий о сработавших селекторах, потом преобразовать его в поток #:child
#:triggered.

Проблема будет только с тем, что надо отследить, когда закроется
notification-port. И эта проблема связана с тем, что придётся порты прокидывать
и в другое место ещё.

Может, ну его нафиг? И сделать просто глобальными переменными? Но тогда
потеряется компонуемость. В текущей постановке, когда notification-port
создаётся по вызову, вроде как, есть некоторая степень компонуемости. Можно
создать и отслеживать несколько таких портов в одном процессе.

Имеет смысл за это побороться. Можно тогда навешать маркеры. Мол, это
child-port, а это notification. И эти маркеры пропускать дальше. Тогда порты
будут жить в одном месте.

Хорошо, сделаем так.

Wed Apr 28 01:41:05 PM +05 2021

Плохо. Это глупо и сложно. Нужен просто поток сработавших портов. Он
инициируется из другой процедуры, которая знает о signal и notification, и может
обработать их условно. А ready-ports-stream просто выдаёт ready ports.
